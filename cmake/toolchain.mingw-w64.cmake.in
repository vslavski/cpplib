cmake_minimum_required(VERSION 3.21.3)

# Architecture. Should be provided by "toolchain.mingw32-w64-*.cmake" files.

if("${MINGW_W64_ARCH}" STREQUAL "i686")
	set(MINGW_W64_ARCH_X86)
elseif("${MINGW_W64_ARCH}" STREQUAL "x86_64")
	set(MINGW_W64_ARCH_X64)
else()
	message(FATAL_ERROR "Unknown MinGW-w64 architecture: ${MINGW_W64_ARCH}")
endif()

# System/Architecture

set(MINGW)
set(CMAKE_SYSTEM_NAME Windows)
if(MINGW_W64_ARCH_X86)
	set(CMAKE_SYSTEM_PROCESSOR x86)
elseif(MINGW_W64_ARCH_X64)
	set(CMAKE_SYSTEM_PROCESSOR AMD64)
endif()

# Search C compiler, C++ compiler and RC compiler

unset(CMAKE_C_COMPILER)
unset(CMAKE_CXX_COMPILER)
unset(CMAKE_RC_COMPILER)

set(MINGW_W64_PACKAGE_NAME "${MINGW_W64_ARCH}-w64-mingw32")
list(APPEND MINGW_W64_PACKAGE_SUFFIXES "-posix" "")
foreach(suffix IN LISTS MINGW_W64_PACKAGE_SUFFIXES)
	find_program(MINGW_W64_C_COMPILER ${MINGW_W64_PACKAGE_NAME}-gcc${suffix})
	if(NOT "${MINGW_W64_C_COMPILER}" EQUAL MINGW_W64_C_COMPILER-NOTFOUND
		AND NOT DEFINED CMAKE_C_COMPILER)
		set(CMAKE_C_COMPILER ${MINGW_W64_C_COMPILER})
	endif()
	find_program(MINGW_W64_CXX_COMPILER ${MINGW_W64_PACKAGE_NAME}-g++${suffix})
	if(NOT "${MINGW_W64_CXX_COMPILER}" EQUAL MINGW_W64_CXX_COMPILER-NOTFOUND
		AND NOT DEFINED CMAKE_CXX_COMPILER)
		set(CMAKE_CXX_COMPILER ${MINGW_W64_CXX_COMPILER})
	endif()
	find_program(MINGW_W64_RC_COMPILER ${MINGW_W64_PACKAGE_NAME}-windres${suffix})
	if(NOT "${MINGW_W64_RC_COMPILER}" EQUAL MINGW_W64_RC_COMPILER-NOTFOUND
		AND NOT DEFINED CMAKE_RC_COMPILER)
		set(CMAKE_RC_COMPILER ${MINGW_W64_RC_COMPILER})
	endif()
endforeach()

if(NOT DEFINED CMAKE_C_COMPILER)
	message(FATAL_ERROR "Unable to detect C compiler")
elseif(NOT DEFINED CMAKE_CXX_COMPILER)
	message(FATAL_ERROR "Unable to detect C++ compiler")
elseif(NOT DEFINED CMAKE_RC_COMPILER)
	message(FATAL_ERROR "Unable to detect resources compiler")
endif()

# Search for system root directory

list(APPEND MINGW_W64_ROOT_PATH_PREFIXES
	"/mingw32"
	"/usr/${MINGW_W64_PACKAGE_NAME}"
	)
foreach(path IN LISTS MINGW_W64_ROOT_PATH_PREFIXES)
	if (IS_DIRECTORY "${path}")
		find_path(MINGW_W64_INCLUDE_PATH "include/windows.h"
			PATHS "${path}"
			PATH_SUFFIXES "/sys-root/mingw" ""
			NO_DEFAULT_PATH)
		if (NOT "${MINGW_W64_INCLUDE_PATH}" EQUAL MINGW_W64_INCLUDE_PATH-NOTFOUND)
			break()
		endif()
		unset(MINGW_W64_INCLUDE_PATH)
	endif()
endforeach()

if(NOT MINGW_W64_INCLUDE_PATH)
	message(FATAL_ERROR "Unable to locate MinGW-w64 system root")
endif()

set(CMAKE_FIND_ROOT_PATH ${MINGW_W64_INCLUDE_PATH})

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
